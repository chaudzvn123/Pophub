import discord
from discord.ext import commands, tasks
import asyncio
import random
import json
import os

# ================== C·∫§U H√åNH ==================
TOKEN = "YOUR_DISCORD_TOKEN"   # Thay token bot c·ªßa b·∫°n
PREFIX = ","
ADMIN_UID = [123456789012345678]  # Thay b·∫±ng Discord ID admin

DATA_FILE = "users.json"

ROUND_TIME = 40   # 40s 1 v√≤ng
LOCK_TIME = 35    # Sau 35s th√¨ c·∫•m c∆∞·ª£c

# ================== BOT ==================
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=PREFIX, intents=intents)

# ================== D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG ==================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_balance(uid):
    data = load_data()
    return data.get(str(uid), 0)

def add_balance(uid, amount):
    data = load_data()
    uid = str(uid)
    if uid not in data:
        data[uid] = 0
    data[uid] += amount
    if data[uid] < 0:
        data[uid] = 0
    save_data(data)

# ================== GAME STATE ==================
current_bets = {}
bet_open = True
history = []  # l∆∞u k·∫øt qu·∫£ t√†i/x·ªâu 10 v√≤ng g·∫ßn nh·∫•t
win_streak = {}
force_lose_rounds = {}

# ================== L·ªÜNH ==================
@bot.command(name="datcuoc", aliases=["bet"])
async def dat_cuoc(ctx, choice: str, amount: int):
    global bet_open, current_bets

    valid_choices = ["t√†i", "tai", "x·ªâu", "xiu"]
    if not bet_open:
        return await ctx.send("‚ùå Hi·ªán ƒë√£ kh√≥a c∆∞·ª£c, vui l√≤ng ch·ªù v√≤ng sau!")

    if choice.lower() not in valid_choices:
        return await ctx.send("‚ùå Ch·ªâ ƒë∆∞·ª£c ch·ªçn **t√†i** ho·∫∑c **x·ªâu**!")
    if amount <= 0:
        return await ctx.send("‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")

    balance = get_balance(ctx.author.id)
    if balance < amount:
        return await ctx.send(f"‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞: {balance:,} xu")

    if ctx.author.id in current_bets:
        return await ctx.send("‚ùå B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c r·ªìi, kh√¥ng th·ªÉ ƒë·∫∑t th√™m!")

    # Tr·ª´ ti·ªÅn t·∫°m
    add_balance(ctx.author.id, -amount)
    user_choice = "t√†i" if choice.lower().startswith("t") else "x·ªâu"
    current_bets[ctx.author.id] = {"choice": user_choice, "amount": amount}

    await ctx.send(f"‚úÖ {ctx.author.mention} ƒë√£ ƒë·∫∑t **{amount:,} xu** v√†o **{user_choice.upper()}**")

@bot.command(name="addcash")
async def addcash(ctx, member: discord.Member, amount: int):
    if ctx.author.id not in ADMIN_UID:
        return await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn!")

    add_balance(member.id, amount)
    await ctx.send(f"‚úÖ ƒê√£ c·ªông **{amount:,} xu** cho {member.mention}")

@bot.command(name="give")
async def give(ctx, member: discord.Member, amount: int):
    if amount <= 0:
        return await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")

    if get_balance(ctx.author.id) < amount:
        return await ctx.send("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn!")

    add_balance(ctx.author.id, -amount)
    add_balance(member.id, amount)
    await ctx.send(f"‚úÖ {ctx.author.mention} ƒë√£ chuy·ªÉn **{amount:,} xu** cho {member.mention}")

@bot.command(name="cachchoi")
async def cachchoi(ctx):
    text = """
üé≤ **C√ÅCH CH∆†I T√ÄI X·ªàU**
- D√πng l·ªánh: `,datcuoc <t√†i/x·ªâu> <s·ªë xu>`
- 1 v√°n k√©o d√†i **40 gi√¢y**:
  ‚Ä¢ 35 gi√¢y ƒë·∫ßu: m·ªü c∆∞·ª£c
  ‚Ä¢ 5 gi√¢y cu·ªëi: kho√° c∆∞·ª£c & l·∫Øc x√∫c x·∫Øc
- Th·∫Øng: nh·∫≠n l·∫°i **g·∫•p ƒë√¥i s·ªë xu c∆∞·ª£c**
- Thua: m·∫•t s·ªë xu ƒë√£ c∆∞·ª£c
"""
    await ctx.send(text)

@bot.command(name="soicau")
async def soicau(ctx):
    if ctx.author.id not in ADMIN_UID:
        return await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")

    if len(history) < 3:
        return await ctx.send("üìä Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ soi c·∫ßu (c·∫ßn √≠t nh·∫•t 3 k·∫øt qu·∫£).")

    text = " ‚Üí ".join([h.upper() for h in history])

    last3 = history[-3:]
    prediction = None
    if last3[0] == last3[1] == last3[2]:
        prediction = "X·ªàU" if last3[-1] == "t√†i" else "T√ÄI"
    elif last3[0] != last3[1] and last3[1] != last3[2]:
        prediction = last3[0].upper()
    else:
        prediction = random.choice(["T√ÄI", "X·ªàU"])

    embed = discord.Embed(
        title="üîÆ SOI C·∫¶U T√ÄI X·ªàU",
        description=f"10 k·∫øt qu·∫£ g·∫ßn nh·∫•t:\n{text}\n\nüëâ D·ª± ƒëo√°n l·∫ßn ti·∫øp theo: **{prediction}**",
        color=0x00ffcc
    )
    await ctx.send(embed=embed)

# ================== V√íNG T·ª∞ ƒê·ªòNG ==================
@tasks.loop(seconds=ROUND_TIME)
async def tai_xiu_auto():
    global current_bets, bet_open, history

    channel = discord.utils.get(bot.get_all_channels(), name="general")  # ƒë·ªïi t√™n k√™nh n·∫øu c·∫ßn
    if not channel:
        return

    # B·∫Øt ƒë·∫ßu v√≤ng m·ªõi
    current_bets = {}
    bet_open = True
    await channel.send("üé≤ V√≤ng **T√ÄI X·ªàU** m·ªõi b·∫Øt ƒë·∫ßu! B·∫°n c√≥ 35s ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.\nD√πng l·ªánh: `,datcuoc <t√†i/x·ªâu> <s·ªë xu>`")

    # ƒê·ª£i 35s ‚Üí kho√° c∆∞·ª£c
    await asyncio.sleep(LOCK_TIME)
    bet_open = False
    await channel.send("‚è≥ ƒê√£ h·∫øt th·ªùi gian c∆∞·ª£c! C√≤n 5s n·ªØa s·∫Ω l·∫Øc x√∫c x·∫Øc...")

    # ƒê·ª£i 5s ‚Üí l·∫Øc x√∫c x·∫Øc
    await asyncio.sleep(ROUND_TIME - LOCK_TIME)
    dice = [random.randint(1, 6) for _ in range(3)]
    total = sum(dice)
    result = "t√†i" if total > 10 else "x·ªâu"
    history.append(result)
    if len(history) > 10:
        history.pop(0)

    winners, losers = [], []
    for uid, bet in current_bets.items():
        # N·∫øu ng∆∞·ªùi ch∆°i b·ªã √©p thua
        if force_lose_rounds.get(uid, 0) > 0:
            force_lose_rounds[uid] -= 1
            losers.append((uid, bet["amount"]))
            win_streak[uid] = 0
            continue

        if bet["choice"] == result:
            add_balance(uid, bet["amount"] * 2)
            winners.append((uid, bet["amount"]))
            win_streak[uid] = win_streak.get(uid, 0) + 1

            if win_streak[uid] >= 4:
                force_lose_rounds[uid] = 2
                win_streak[uid] = 0
        else:
            losers.append((uid, bet["amount"]))
            win_streak[uid] = 0

    embed = discord.Embed(
        title="üé≤ K·∫æT QU·∫¢ T√ÄI X·ªàU",
        color=0x00ff00
    )
    embed.add_field(name="X√∫c x·∫Øc", value=f"üé≤ {dice[0]} - {dice[1]} - {dice[2]}", inline=True)
    embed.add_field(name="T·ªïng ƒëi·ªÉm", value=f"**{total}**", inline=True)
    embed.add_field(name="K·∫øt qu·∫£", value=f"**{result.upper()}**", inline=True)

    if winners:
        text = "\n".join([f"<@{uid}> th·∫Øng {amt:,} xu" for uid, amt in winners])
        embed.add_field(name="üèÜ Ng∆∞·ªùi th·∫Øng", value=text, inline=False)
    if losers:
        text = "\n".join([f"<@{uid}> thua {amt:,} xu" for uid, amt in losers])
        embed.add_field(name="üíÄ Ng∆∞·ªùi thua", value=text, inline=False)

    await channel.send(embed=embed)

# ================== S·ª∞ KI·ªÜN ==================
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    if not tai_xiu_auto.is_running():
        tai_xiu_auto.start()

# ================== CH·∫†Y BOT ==================
bot.run(TOKEN)
